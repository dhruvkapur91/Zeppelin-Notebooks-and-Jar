{"paragraphs":[{"text":"%md\nLets import all the source code. I have copy pasted it here...","dateUpdated":"2016-12-03T01:28:25+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728466549_-1914381432","id":"20161203-012746_796042235","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Lets import all the source code. I have copy pasted it here&hellip;</p>\n"},"dateCreated":"2016-12-03T01:27:46+0000","dateStarted":"2016-12-03T01:28:22+0000","dateFinished":"2016-12-03T01:28:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"// this is source code...\nimport scala.collection.mutable\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable.Map\n\n\nobject WordCount {\n\n  def wordCount(sentences: ListBuffer[String]) : Map[String, Int] = {\n    val words = getListOfWords(sentences)\n    val wordCount = getCountOfEachWord(words)\n    wordCount.foreach(println)\n    return wordCount\n  }\n\n  def getListOfWords(sentences: ListBuffer[String]) : ListBuffer[String] = {\n    var words: mutable.ListBuffer[String] = ListBuffer[String]()\n    for (sentence <- sentences) {\n      val wordsOfCurrentSentence: Array[String] = sentence.split(\" \")\n      for (word <- wordsOfCurrentSentence) {\n        words += word\n      }\n    }\n    return words\n  }\n\n  def getCountOfEachWord(words : ListBuffer[String]) : Map[String, Int] = {\n    var wordCount: Map[String, Int] = Map[String, Int]()\n\n    for (word <- words) {\n      if (wordCount.isDefinedAt(word)) {\n        wordCount(word) = wordCount(word) + 1\n      } else {\n        wordCount(word) = 1\n      }\n    }\n    return wordCount\n  }\n\n}\n","dateUpdated":"2016-12-03T01:46:19+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728403879_-601526240","id":"20161203-012643_1803004845","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport scala.collection.mutable\n\nimport scala.collection.mutable.ListBuffer\n\n\nimport scala.collection.mutable.Map\ndefined object WordCount\n"},"dateCreated":"2016-12-03T01:26:43+0000","dateStarted":"2016-12-03T01:27:14+0000","dateFinished":"2016-12-03T01:27:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%md\nLets import the testing classes...","dateUpdated":"2016-12-03T01:30:33+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728434510_-1176295124","id":"20161203-012714_18000834","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Lets import the testing classes&hellip;</p>\n"},"dateCreated":"2016-12-03T01:27:14+0000","dateStarted":"2016-12-03T01:28:55+0000","dateFinished":"2016-12-03T01:28:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"import org.scalatest.{FunSuite, GivenWhenThen, ShouldMatchers}\n\nclass WordCountSpec extends org.scalatest.FunSuite with org.scalatest.ShouldMatchers with org.scalatest.GivenWhenThen {\n  \n  import scala.collection.mutable.ListBuffer\n  import scala.collection.mutable.Map\n\n  test(\"Should return an empty Map when given empty List\") {\n    WordCount.wordCount(ListBuffer.empty[String]) should be(empty)\n  }\n\n  test(\"Should give word count when given a non List\") {\n\n    Given(\"A list of sentences\")\n    val sentence1 = \"one sentence\"\n    val sentence2 = \"second sentence\"\n    val sentences = ListBuffer(sentence1,sentence2)\n\n    When(\"Word Count is called\")\n    val wordCount : Map[String,Int] = WordCount.wordCount(sentences)\n\n    Then(\"Word Count should give right count for each word\")\n    wordCount.size should be(3)\n    wordCount(\"one\") should be(1)\n    wordCount(\"sentence\") should be(2)\n    wordCount(\"second\") should be(1)\n  }\n}\n","dateUpdated":"2016-12-03T01:46:07+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728535269_1974165143","id":"20161203-012855_1559609465","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.scalatest.{FunSuite, GivenWhenThen, ShouldMatchers}\n\ndefined class WordCountSpec\n"},"dateCreated":"2016-12-03T01:28:55+0000","dateStarted":"2016-12-03T01:29:43+0000","dateFinished":"2016-12-03T01:29:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%md\nAnd this is how we run them...","dateUpdated":"2016-12-03T01:30:40+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728538589_-1812933605","id":"20161203-012858_620453505","result":{"code":"SUCCESS","type":"HTML","msg":"<p>And this is how we run them&hellip;</p>\n"},"dateCreated":"2016-12-03T01:28:58+0000","dateStarted":"2016-12-03T01:30:03+0000","dateFinished":"2016-12-03T01:30:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"(new WordCountSpec).execute()","dateUpdated":"2016-12-03T01:30:14+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728603189_1991771647","id":"20161203-013003_1155163966","result":{"code":"SUCCESS","type":"TEXT","msg":"\u001b[32mWordCountSpec:\u001b[0m\n\u001b[32m- Should return an empty Map when given empty List\u001b[0m\n(second,1)\n(one,1)\n(sentence,2)\n\u001b[32m- Should give word count when given a non List\u001b[0m\n\u001b[32m  + Given A list of sentences \u001b[0m\n\u001b[32m  + When Word Count is called \u001b[0m\n\u001b[32m  + Then Word Count should give right count for each word \u001b[0m\n"},"dateCreated":"2016-12-03T01:30:03+0000","dateStarted":"2016-12-03T01:30:14+0000","dateFinished":"2016-12-03T01:30:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"","dateUpdated":"2016-12-03T01:30:25+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480728614869_-630676856","id":"20161203-013014_171733037","dateCreated":"2016-12-03T01:30:14+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:81"}],"name":"Just Scala Word Count","id":"2C4JQA2WM","angularObjects":{"2C1FSWPV5:shared_process":[],"2C2ANMC3H:shared_process":[],"2C27C2CAW:shared_process":[],"2C1EQ4DYT:shared_process":[],"2C2D85D6Q:shared_process":[],"2BYMYHYE7:shared_process":[],"2BZJ3HWCJ:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}